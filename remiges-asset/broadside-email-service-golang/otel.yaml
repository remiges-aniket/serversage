receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  prometheus:
    config:
      scrape_configs:
        - job_name: 'email-service'
          scrape_interval: 15s
          static_configs:
            - targets: ['localhost:8088']
              labels:
                service: 'broadside-email-service'

        - job_name: 'otel-collector'
          scrape_interval: 30s
          static_configs:
            - targets: ['localhost:8889']

processors:
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  memory_limiter:
    limit_mib: 512

  resource:
    attributes:
      - key: environment
        value: development
        action: upsert
      - key: deployment.environment
        value: dev
        action: upsert

  attributes:
    actions:
      - key: service.namespace
        value: broadside
        action: upsert

  filter:
    metrics:
      exclude:
        match_type: regexp
        metric_names:
          - ".*grpc_io.*"
          - ".*http_.*_duration.*_bucket"

    traces:
      span:
        - 'attributes["service.name"] == "unwanted-service"'

exporters:
  # Prometheus exporter for metrics
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: broadside
    const_labels:
      environment: development

  # OTLP exporter for traces to Jaeger
  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true

  # Grafana Tempo exporter for traces
  otlp/tempo:
    endpoint: http://tempo:4317
    tls:
      insecure: true

  # Loki exporter for logs
  # loki:
  #   endpoint: http://loki:3100/loki/api/v1/push
  #   tenant_id: "broadside"
  #   labels:
  #     attributes:
  #       service.name: "service_name"
  #       service.instance.id: "service_instance_id"
  #       level: "level"
  #     resource:
  #       service.name: "service_name"
  #       deployment.environment: "environment"

  # Console exporter for debugging
  debug:
    verbosity: detailed

  # File exporter for backup
  file:
    path: ./otel-output.json

connectors:
  spanmetrics:
    namespace: "span.metrics"
    histogram:
      unit: "ms"
    dimensions:
      - name: service.name
      - name: operation
      - name: span.kind
      - name: status.code
    exemplars:
      enabled: true
    metrics_flush_interval: 15s

service:
  telemetry:
    logs:
      level: info
    metrics:
      address: 0.0.0.0:8888

  extensions: [health_check, pprof, zpages]

  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, attributes, batch]
      exporters: [otlp/jaeger, otlp/tempo, spanmetrics]

    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus, spanmetrics]
      processors: [memory_limiter, resource, attributes, filter, batch]
      exporters: [prometheus]

    # Logs pipeline (if using log ingestion)
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, attributes, batch]
      exporters: [loki, debug]

extensions:
  health_check:
    endpoint: 0.0.0.0:13133

  pprof:
    endpoint: 0.0.0.0:1777

  zpages:
    endpoint: 0.0.0.0:55679