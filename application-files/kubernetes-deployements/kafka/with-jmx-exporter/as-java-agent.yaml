---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jmx-kafka-config
  namespace: kafka
data:
  jmx-kafka-prometheus.yml: |
    # When running as a Java Agent, hostPort and startDelaySeconds are not needed.
    # The agent directly accesses MBeans within the same JVM.
    ssl: false
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    whitelistObjectNames:
    - kafka.server:type=*
    - kafka.controller:type=*
    - kafka.network:type=*
    - kafka.log:type=*
    - java.lang:type=*
    - kafka.cluster:type=*
    - kafka.coordinator.group:type=*
    - kafka.coordinator.transaction:type=*
    rules:
    # Broker metrics - Essential for cluster health
    - pattern: kafka.server<type=ReplicaManager, name=(.+)><>Value
      name: kafka_server_replica_manager_$1
      type: GAUGE
    
    # Controller metrics - Critical for cluster leadership
    - pattern: kafka.controller<type=KafkaController, name=(.+)><>Value
      name: kafka_controller_kafka_controller_$1
      type: GAUGE
    
    - pattern: kafka.controller<type=ControllerStats, name=(.+)><>Count
      name: kafka_controller_stats_$1_total
      type: COUNTER
    
    # Broker request metrics - Performance monitoring
    - pattern: kafka.network<type=RequestMetrics, name=RequestsPerSec, request=(.+)><>Count
      name: kafka_network_request_total
      labels:
        request: "$1"
      type: COUNTER
    
    - pattern: kafka.network<type=RequestMetrics, name=TotalTimeMs, request=(.+)><>(\w+)
      name: kafka_network_request_time_ms
      labels:
        request: "$1"
        quantile: "$2"
      type: GAUGE
    
    # Producer request metrics
    - pattern: kafka.server<type=BrokerTopicMetrics, name=MessagesInPerSec><>Count
      name: kafka_server_messages_in_total
      type: COUNTER
    
    - pattern: kafka.server<type=BrokerTopicMetrics, name=BytesInPerSec><>Count
      name: kafka_server_bytes_in_total
      type: COUNTER
    
    - pattern: kafka.server<type=BrokerTopicMetrics, name=BytesOutPerSec><>Count
      name: kafka_server_bytes_out_total
      type: COUNTER
    
    # Per-topic metrics
    - pattern: kafka.server<type=BrokerTopicMetrics, name=(.+), topic=(.+)><>Count
      name: kafka_server_topic_$1_total
      labels:
        topic: "$2"
      type: COUNTER
    
    - pattern: kafka.server<type=BrokerTopicMetrics, name=(.+), topic=(.+)><>(\w+)Rate
      name: kafka_server_topic_$1_rate
      labels:
        topic: "$2"
      type: GAUGE
    
    # Log size metrics - Important for storage monitoring
    - pattern: kafka.log<type=LogSize, name=Size, topic=(.+), partition=(.+)><>Value
      name: kafka_log_size_bytes
      labels:
        topic: "$1"
        partition: "$2"
      type: GAUGE
    
    # Replica lag metrics - Critical for data consistency
    - pattern: kafka.server<type=ReplicaFetcherManager, name=MaxLag, clientId=(.+)><>Value
      name: kafka_server_replica_max_lag
      labels:
        client_id: "$1"
      type: GAUGE
    
    # ISR shrink/expand metrics - Important for replication health
    - pattern: kafka.server<type=ReplicaManager, name=IsrShrinksPerSec><>Count
      name: kafka_server_isr_shrinks_total
      type: COUNTER
    
    - pattern: kafka.server<type=ReplicaManager, name=IsrExpandsPerSec><>Count
      name: kafka_server_isr_expands_total
      type: COUNTER
    
    # Offline partitions - Critical alert metric
    - pattern: kafka.controller<type=KafkaController, name=OfflinePartitionsCount><>Value
      name: kafka_controller_offline_partitions
      type: GAUGE
    
    # Active controller count - Should be 1 in healthy cluster
    - pattern: kafka.controller<type=KafkaController, name=ActiveControllerCount><>Value
      name: kafka_controller_active_controller_count
      type: GAUGE
    
    # Unclean leader elections - Important for data loss detection
    - pattern: kafka.controller<type=ControllerStats, name=UncleanLeaderElectionsPerSec><>Count
      name: kafka_controller_unclean_leader_elections_total
      type: COUNTER
    
    # Leader election rate
    - pattern: kafka.controller<type=ControllerStats, name=LeaderElectionRateAndTimeMs><>Count
      name: kafka_controller_leader_elections_total
      type: COUNTER
    
    # ZooKeeper client metrics (if applicable)
    - pattern: kafka.server<type=SessionExpireListener, name=(.+)><>Count
      name: kafka_server_zookeeper_$1_total
      type: COUNTER
    
    # Request queue metrics
    - pattern: kafka.network<type=RequestChannel, name=RequestQueueSize><>Value
      name: kafka_network_request_queue_size
      type: GAUGE
    
    # Network processor metrics
    - pattern: kafka.network<type=Processor, name=IdlePercent, networkProcessor=(.+)><>Value
      name: kafka_network_processor_idle_percent
      labels:
        processor: "$1"
      type: GAUGE
    
    # Log flush metrics
    - pattern: kafka.log<type=LogFlushStats, name=LogFlushRateAndTimeMs><>Count
      name: kafka_log_flush_total
      type: COUNTER
    
    # Group coordinator metrics
    - pattern: kafka.coordinator.group<type=GroupMetadataManager, name=(.+)><>Value
      name: kafka_coordinator_group_$1
      type: GAUGE
    
    # Transaction coordinator metrics
    - pattern: kafka.coordinator.transaction<type=TransactionStateManager, name=(.+)><>Value
      name: kafka_coordinator_transaction_$1
      type: GAUGE
    
    # Generic JVM metrics
    - pattern: java.lang<type=Memory><(.+)>(.+)
      name: jvm_memory_$1_$2
      type: GAUGE
    
    - pattern: java.lang<type=GarbageCollector, name=(.+)><>CollectionCount
      name: jvm_gc_collection_total
      labels:
        collector: "$1"
      type: COUNTER
    
    - pattern: java.lang<type=GarbageCollector, name=(.+)><>CollectionTime
      name: jvm_gc_collection_time_ms
      labels:
        collector: "$1"
      type: COUNTER
    
    # Generic catch-all patterns for any remaining metrics
    - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
      name: kafka_server_$1_$2
      labels:
        client_id: "$3"
        topic: "$4"
        partition: "$5"
      type: GAUGE
    
    - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
      name: kafka_server_$1_$2
      labels:
        client_id: "$3"
        broker: "$4:$5"
      type: GAUGE
    
    - pattern: kafka.server<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value
      name: kafka_server_$1_$2
      labels:
        topic: "$3"
        partition: "$4"
      type: GAUGE
    
    - pattern: kafka.server<type=(.+), name=(.+)><>Value
      name: kafka_server_$1_$2
      type: GAUGE
    
    - pattern: kafka.controller<type=(.+), name=(.+)><>Value
      name: kafka_controller_$1_$2
      type: GAUGE
    
    - pattern: kafka.network<type=(.+), name=(.+)><>Value
      name: kafka_network_$1_$2
      type: GAUGE
    
    - pattern: kafka.log<type=(.+), name=(.+)><>Value
      name: kafka_log_$1_$2
      type: GAUGE

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: kafka
spec:
  serviceName: "kafka-headless"
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      initContainers:
        - name: download-jmx-agent
          image: busybox:latest # A lightweight image that includes wget or curl
          command: ["wget"]
          args:
            - "-O"
            - "/opt/jmx-agent/jmx_prometheus_javaagent.jar" # Specify a version
            - "https://github.com/prometheus/jmx_exporter/releases/download/1.3.0/jmx_prometheus_javaagent-1.3.0.jar"
          volumeMounts:
            - name: jmx-agent-volume
              mountPath: /opt/jmx-agent
      containers:
        - name: kafka
          image: bitnami/kafka:latest
          ports:
            - containerPort: 9092 # Kafka client listener
              name: client
            - containerPort: 5556 # JMX Exporter metrics port, exposed by the agent
              name: metrics
            - containerPort: 9094 # <--- ADD THIS NEW PORT for Kafka's EXTERNAL listener
              name: external
          env:
            - name: KAFKA_CFG_NODE_ID
              value: "0"
            - name: KAFKA_CFG_PROCESS_ROLES
              value: "controller,broker"
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: "0@kafka-0.kafka-headless.kafka.svc.cluster.local:9093"
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka-0.kafka-headless.kafka.svc.cluster.local:9092,EXTERNAL://kafka-0.kafka-headless.kafka.svc.cluster.local:9094"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT"
            - name: KAFKA_OPTS
              value: "-javaagent:/opt/jmx-agent/jmx_prometheus_javaagent.jar=5556:/opt/jmx-config/jmx-kafka-prometheus.yml"
            - name: KAFKA_KRAFT_CLUSTER_ID
              value: "ABCDEFGH1234567890" # Replace with a unique cluster ID
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka/data
            - name: jmx-agent-volume # Mount the volume where the JAR is downloaded
              mountPath: /opt/jmx-agent
            - name: jmx-config # Mount the JMX exporter configuration
              mountPath: /opt/jmx-config
      volumes:
        - name: jmx-agent-volume
          emptyDir: {} # A temporary volume to hold the downloaded JMX agent JAR
        - name: jmx-config
          configMap:
            name: jmx-kafka-config
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: kafka
  labels:
    app: kafka
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9092
      targetPort: client
      protocol: TCP
      name: client
    - port: 9093
      targetPort: 9093
      protocol: TCP
      name: controller
  selector:
    app: kafka
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-metrics
  namespace: kafka
  labels:
    app: kafka
    app.kubernetes.io/component: metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "5556"
spec:
  selector:
    app: kafka
  ports:
    - name: metrics
      port: 5556
      targetPort: metrics
  type: ClusterIP