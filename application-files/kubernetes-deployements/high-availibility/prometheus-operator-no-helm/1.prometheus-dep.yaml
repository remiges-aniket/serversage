# Create MinIO bucket for Thanos
apiVersion: batch/v1
kind: Job
metadata:
  name: create-thanos-bucket
  namespace: monitoring
spec:
  template:
    spec:
      containers:
      - name: mc
        image: minio/mc:RELEASE.2025-04-16T18-13-26Z
        command:
        - /bin/sh
        - -c
        - |
          mc config host add myminio http://minio.database.svc.cluster.local:9000  minio minio123 && \
          mc mb --ignore-existing myminio/thanos
      restartPolicy: OnFailure

---
# Thanos Configuration Secret
apiVersion: v1
kind: Secret
metadata:
  name: thanos-objstore-config
  namespace: monitoring
type: Opaque
stringData:
  objstore.yaml: |
    type: S3
    config:
      bucket: thanos
      endpoint: minio.database.svc.cluster.local:9000
      access_key: minio
      secret_key: minio123
      insecure: true
      signature_version2: false

---
# Prometheus instance (CRD) - Production HA Setup
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1  # HA setup with 2 replicas for production
  baseImage: quay.io/prometheus/prometheus:v2.48.1
  serviceAccountName: prometheus
  serviceMonitorSelector: {}
  podMonitorSelector: {}
  additionalScrapeConfigs:
    name: additional-scrape-configs
    key: prometheus-additional.yaml
  probeSelector: {}
  scrapeInterval: "15s"
  evaluationInterval: "15s"
  retention: "1h"  #"30d"
  externalLabels:
    cluster: ha-cluster
    prometheus_replica: $(POD_NAME)
  securityContext:
    # fsGroup: 2000
    runAsUser: 0 #1000
    # runAsGroup: 2000
    # runAsNonRoot: true
  storage:
    volumeClaimTemplate:
      spec:
        storageClassName: prometheus-storage
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
  thanos:
    baseImage: quay.io/thanos/thanos
    version: v0.38.0
    objectStorageConfig:
      key: objstore.yaml
      name: thanos-objstore-config
    listenLocal: false
    resources:
      requests:
        memory: "400Mi"
        cpu: "100m"
      limits:
        memory: "1Gi"
        cpu: "1000m"

---
# Prometheus Operator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-operator
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus-operator
    spec:
      serviceAccountName: prometheus-operator
      containers:
      - name: prometheus-operator
        image: quay.io/prometheus-operator/prometheus-operator:v0.71.0
        args:
        - --kubelet-service=kube-system/kubelet
        - --log-level=debug
        - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.71.0
        ports:
        - containerPort: 8080
          name: http

---
# Prometheus Operator Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-operator
  namespace: monitoring

---
# Prometheus Operator ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-operator
rules:
- apiGroups: ["monitoring.coreos.com"]
  resources:
  - alertmanagers
  - alertmanagers/finalizers
  - prometheuses
  - prometheuses/finalizers
  - thanosrulers
  - thanosrulers/finalizers
  - servicemonitors
  - podmonitors
  - probes
  - prometheusrules
  - alertmanagerconfigs
  - prometheuses/status # <-- ADD THIS LINE
  - alertmanagers/status # <-- ADD THIS LINE
  - thanosrulers/status # <-- ADD THIS LINE
  verbs: ["*"]
- apiGroups: ["apps"]
  resources:
  - statefulsets
  verbs: ["*"]
- apiGroups: [""]
  resources:
  - configmaps
  - secrets
  verbs: ["*"]
- apiGroups: [""]
  resources:
  - pods
  verbs: ["list", "delete"]
- apiGroups: [""]
  resources:
  - services
  - services/finalizers
  - endpoints
  verbs: ["get", "create", "update", "delete"]
- apiGroups: [""]
  resources:
  - nodes
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - namespaces
  verbs: ["get", "list", "watch"]

---
# Prometheus Operator ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-operator
subjects:
- kind: ServiceAccount
  name: prometheus-operator
  namespace: monitoring

---
# Prometheus Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring

---
# Prometheus ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- apiGroups: ["networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# Prometheus ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring
---
# Thanos Querier Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thanos-querier
  namespace: monitoring
spec:
  replicas: 1  # HA setup for production
  selector:
    matchLabels:
      app: thanos-querier
  template:
    metadata:
      labels:
        app: thanos-querier
    spec:
      containers:
      - name: thanos
        image: quay.io/thanos/thanos:v0.38.0
        args:
        - query
        - --http-address=0.0.0.0:9090
        - --grpc-address=0.0.0.0:10901
        - --query.replica-label=prometheus_replica
        - --query.replica-label=thanos_replica
        # - --endpoint=prometheus-operated.prometheus.svc.cluster.local:10901
        # - --endpoint=thanos-store-gateway.prometheus.svc.cluster.local:10901
        - --endpoint=dnssrv+_grpc._tcp.prometheus-operated.monitoring.svc.cluster.local:10901
        - --endpoint=dnssrv+_grpc._tcp.thanos-store-gateway.monitoring.svc.cluster.local:10901
        - --query.auto-downsampling
        - --query.partial-response
        - --log.level=info
        ports:
        - containerPort: 9090
          name: http
          protocol: TCP
        - containerPort: 10901
          name: grpc
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi

---
# Thanos Store Gateway StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: thanos-store-gateway
  namespace: monitoring
spec:
  replicas: 1
  serviceName: thanos-store-gateway
  selector:
    matchLabels:
      app: thanos-store-gateway
  template:
    metadata:
      labels:
        app: thanos-store-gateway
    spec:
      securityContext:
        runAsUser: 0
      containers:
      - name: thanos
        image: quay.io/thanos/thanos:v0.38.0
        args:
        - store
        - --log.level=info
        - --data-dir=/var/thanos/store
        - --grpc-address=0.0.0.0:10901
        - --http-address=0.0.0.0:10902
        - --objstore.config-file=/etc/thanos/objstore.yaml
        - --store.index-header-posting-offsets-in-mem-sampling=128
        - --store.enable-index-header-lazy-reader
        - --sync-block-duration=10m
        - --chunk-pool-size=6GB
        - --index-cache-size=2GB
        ports:
        - containerPort: 10901
          name: grpc
        - containerPort: 10902
          name: http
        volumeMounts:
        - name: data
          mountPath: /var/thanos/store
        - name: config
          mountPath: /etc/thanos
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
        resources:
          requests:
            memory: "3Gi"
            cpu: "500m"
          limits:
            memory: "8Gi"
            cpu: "2000m"
      volumes:
      - name: config
        secret:
          secretName: thanos-objstore-config
      - name: data
        persistentVolumeClaim:
          claimName: thanos-store-gateway-data

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: thanos-querier
  namespace: monitoring
spec:
  selector:
    app: thanos-querier
  ports:
  - name: http
    protocol: TCP
    port: 9090
    targetPort: 9090
    nodePort: 30017
  - name: grpc
    protocol: TCP
    port: 10901
    targetPort: 10901
  type: NodePort

---
apiVersion: v1
kind: Service
metadata:
  name: thanos-store-gateway
  namespace: monitoring
spec:
  clusterIP: None
  ports:
  - name: grpc
    port: 10901
    targetPort: 10901
  - name: http
    port: 10902
    targetPort: 10902
  selector:
    app: thanos-store-gateway
---