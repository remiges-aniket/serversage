# alerts.yaml
groups:
- name: postgresql-replication-alerts
  rules:
  - alert: PostgresReplicationLagBytesHigh
    expr: pg_pg_replication_lag_bytes > 10000000 # Example: 10MB lag
    for: 5m
    labels:
      severity: critical
    annotations:
      summary: "PostgreSQL Replication Lag (Bytes) is High on {{ $labels.instance }}"
      description: "Replication lag for {{ $labels.application_name }} ({{ $labels.client_addr }}) is {{ $value }} bytes, exceeding 10MB."

  - alert: PostgresReplicationLagTimeHigh
    expr: pg_pg_replication_lag_seconds_estimate > 60 # Example: 60 seconds lag
    for: 2m
    labels:
      severity: warning
    annotations:
      summary: "PostgreSQL Replication Lag (Time) is High on {{ $labels.instance }}"
      description: "Estimated replication lag for {{ $labels.application_name }} ({{ $labels.client_addr }}) is {{ $value }} seconds, exceeding 60 seconds."

- name: postgresql-long-running-queries
  rules:
  - alert: PostgresLongRunningActiveQuery
    expr: pg_pg_long_running_active_queries_seconds > 300 # Alert if a query runs for > 5 minutes (300 seconds)
    for: 1m # Sustain for at least 1 minute
    labels:
      severity: critical
    annotations:
      summary: "PostgreSQL Long-Running Active Query Detected on {{ $labels.instance }}"
      description: |
        A PostgreSQL query is running for an extended period.
        Database: {{ $labels.datname }}
        User: {{ $labels.usename }}
        Client: {{ $labels.client_addr }}
        PID: {{ $labels.pid }}
        Duration: {{ $value | humanizeDuration }}
        Wait Event: {{ $labels.wait_event_type }}/{{ $labels.wait_event }}
        Query Hash: {{ $labels.query_hash }}
        Consider checking `pg_stat_activity` for details and potential termination.